#########################################################################################################
# Trzeba dostowowac do swoich potrzeb nastepujace fragmenty: 
# linia 13: ustawic sciezke do katalogu projektu
# linie 104 - 118: ustawic odpowiednio sciezki
# Polecenie 'scons' lub 'scons test=0' buduje gre, zas 'scons test=1' - testy.
#########################################################################################################
#srodowisko dla Debiana
import os,shutil,platform
import SCons.Builder

#########################################################################################################
# Zmienne:
project_sources = 'C:/Documents and Settings/Kasia/Moje dokumenty/Moje programy/ZPR_new/Projekt_ZPR'
tests_sources = project_sources + '/Tests'
files_cpp = [ 
              'Asteroid.cpp',
              'ATST.cpp',
              'AudioManager.cpp',
              'BackMenuState.cpp',
              'BattleOfHothMenuState.cpp',
              'BattleOfMindorMenuState.cpp',
              'BoundingBox.cpp',
              'Camera.cpp',
              'ChooseLevelMenuState.cpp',
              'CollisionDetector.cpp',
              'ColorDepthMenuState.cpp',
              'Configuration.cpp',
              'DestroyEffect.cpp',
              'EnemyPrototype.cpp',
              'EnemyPrototypeFactory.cpp',
              'Engine.cpp',
              'ExplosionEffect.cpp',
              'Extensions.cpp',
              'Fog.cpp',
              'Game.cpp',
              'GameHud.cpp',
              'GameMenuState.cpp',
              'GameState.cpp',
              'InputManager.cpp',
              'LaserBlast.cpp',
              'LevelManager.cpp',
              'Lighting.cpp',
              'Matrix4.cpp',
              'Menu.cpp',
              'MotionBlur.cpp',
              'Particle.cpp',
              'Quatenion.cpp',
              'Renderer.cpp',
              'ResolutionMenuState.cpp',
              'SceneManager.cpp',
              'SceneNode.cpp',
              'Shader.cpp',
              'ShowOptionsMenuState.cpp',
              'SkyBox.cpp',
              'SpecialFXManager.cpp',
              'StarDestroyer.cpp',
              'Terrain.cpp',
              'TieFighter.cpp',
              'Timer.cpp',
              'VBO.cpp',
              'Vector3D.cpp',
              'WindowManager.cpp',
              'Xwing.cpp',
              '/ResourceManager/Mesh.cpp',
              '/ResourceManager/Resource.cpp',
              '/ResourceManager/ResourceManager.cpp',
              '/ResourceManager/Texture.cpp',
              '/Menu/CreditsMenuState.cpp',
              '/Menu/IMenuState.cpp',
              '/Menu/MenuStateContext.cpp',
              '/Menu/OptionsMenuState.cpp',
              '/Menu/QuitMenuState.cpp',
              '/Menu/ShowCreditsMenuState.cpp'
            ]

test_files_cpp = [ 'Helloworld.cpp' ]
#########################################################################################################
           
env = Environment()
env.Append( ENV = {'PATH' : os.environ['PATH'] })
env.Append( LIBPATH = [ Dir('./') ] )

if(platform.system() == "Linux"):
   os.putenv('LD_LIBRARY_PATH', os.getcwd() )
   os.putenv('PYTHONPATH', os.getcwd() )

elif(platform.system() == "Windows"):
   os.putenv('PYTHONPATH', os.getcwd() )
   os.putenv('PATH', os.getcwd() + ';' + os.getenv('PATH') )

else:
   print platform.system() + " not supported"

Export('env')

#########################################################################################################
if(platform.system() == "Linux"):
   env.Append( CPPFLAGS = '-Wall -pedantic -pthread' )
   env.Append( CPPPATH = ['/usr/include/GL', 'usr/include/SDL', 'usr/include/boost/smart_ptr'] )
   env.Append( LINKFLAGS = '-Wall -pthread' )
   env.Append( LIBPATH = ['/usr/lib'] )
   env.Append( LIBS = [ 'SDL', 'GLU' ] )
   project_sources = "."
   
elif(platform.system() == "Windows"):
   env.Append( CPPPATH = [ Dir('C:/Program Files/boost/boost_1_44_0'),
                           Dir('C:/Download/SDL/SDL_mixer-1.2.11'),
                           Dir('C:/Download/SDL/SDL_image-1.2.10'),
                           Dir('C:/Download/SDL/SDL_ttf-2.0.10/include'),
                           Dir('C:/Download/SDL/SDL-1.2.14/include'),
                           Dir('C:/Download/OpenGL GLUT/GL Files/include'),
                           Dir('C:/Python27/include') ] )
   env.Append( LIBPATH = [ Dir('C:/Program Files/boost/boost_1_44_0/lib'),
                           Dir('C:/Download/OpenGL GLUT/GL Files/lib'),
                           Dir('C:/Download/SDL/SDL-1.2.14/lib'),
                           Dir('C:/Download/SDL/SDL_mixer-1.2.11/lib'),
                           Dir('C:/Download/SDL/SDL_image-1.2.10/lib'),
                           Dir('C:/Download/SDL/SDL_ttf-2.0.10/lib'),
                           Dir('C:/Python27/libs') ] )
#   env.Append( CPPFLAGS = ' /EHsc /MD /D "WIN32" /D "_CONSOLE" /W3' )
   #env.Append( CPPFLAGS = ' /EHsc /MDd /D "WIN32" /D "_DEBUG" /D "_CONSOLE" /W3 /D _MBCS /RTC1' )
   env.Append( CPPFLAGS = '/Od /D "WIN32" /D "_DEBUG" /D "_CONSOLE" /D "_CRT_SECURE_NO_WARNINGS" /D "_MBCS" /Gm /EHsc /RTC1 /MDd /W1 /nologo /c /ZI /TP /errorReport:prompt' )
   env.Append( LINKFLAGS = ' /SUBSYSTEM:WINDOWS /NODEFAULTLIB:msvcrt.lib /DEBUG' )
   #env.Append( LINKFLAGS = '/INCREMENTAL /NOLOGO /NODEFAULTLIB:"msvcrt.lib" /DEBUG /SUBSYSTEM:WINDOWS /DYNAMICBASE /NXCOMPAT /MACHINE:X86 SDL.lib SDLmain.lib SDL_ttf.lib SDL_mixer.lib SDL_image.lib OpenGL32.lib Glu32.lib libboost_signals-vc90-mt-gd-1_44.lib') 
   env.Append( LIBS = [ 'SDLmain', 'SDL', 'SDL_ttf', 'SDL_mixer',
                        'SDL_image', 'OpenGL32', 'Glu32', 'libboost_signals-vc90-mt-gd-1_44.lib' ] )
   #env.Append(CPPDEFINES = ['_DLL', '_MT'])
#   env.Append( LINKFLAGS = '/NODEFAULTLIB:msvcrt.lib' )
                        
else:
   print 'system not supported'

#########################################################################################################

#Opcje
opts = Options('custom.py')
opts.Add('test','Set to 1 to run tests, 0 to run game', 0)
env.options = opts
Help(opts.GenerateHelpText(env) )

test = ARGUMENTS.get('test',0)

#########################################################################################################

#dokleja nazwe build dir na poczatku kazdego elementu z listy src_files
def prepare_src_files( build_dir, src_files):
   src_compilation = []
   for f in src_files:
      src_compilation.append(build_dir + f)
   return src_compilation

#buduje projekt
def build_project( env, build_dir, res_name ):
   e = env.Clone()
   em = e.Clone()
   em.BuildDir( build_dir, project_sources, duplicate = 0)
   em.Program(target = res_name,
              source = prepare_src_files(build_dir, files_cpp ) )
   return

#buduje testy
def build_tests( env, build_dir, res_name ):
   e = env.Clone()
   em = e.Clone()
   em.BuildDir( build_dir, tests_sources, duplicate = 0)

   if(platform.system() == "Windows"):
      em.Append( LINKFLAGS = ' /SUBSYSTEM:CONSOLE ' )

   em.Append( CPPFLAGS = ' -D BOOST_TEST_MAIN' )
   em.Program(target = res_name,
              source = prepare_src_files(build_dir, test_files_cpp ) )
   return
#########################################################################################################

if test== '1':
  build_tests( env, project_sources + '/Build_test/', 'tests' )
else:
  build_project( env, project_sources + '/Build/', 'ZPRGame' )
  


#http://code.google.com/p/nativeclient/source/browse/trunk/src/native_client/SConstruct?r=388